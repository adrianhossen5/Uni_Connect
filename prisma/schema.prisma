generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String      @id @default(cuid())
  name         String?
  email        String      @unique
  password     String
  role         Role        @default(STUDENT)
  universityId String?
  uni          University? @relation(fields: [universityId], references: [id])
  Comment      Comment[]
  Rating       Rating[]
  Member       Member[]
}

model Event {
  id              String         @id @default(cuid())
  name            String         @db.Text
  description     String?        @db.Text
  date            String?        @db.Text
  phone_no        String?        @db.Text
  type            EventType
  feedbackId      String?        @unique
  eventlocationId String?        @unique
  universityId    String?
  rSOId           String?
  approved        String
  email           String?        @db.Text
  university      University?    @relation(fields: [universityId], references: [id])
  feedback        Feedback?      @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  eventlocation   EventLocation? @relation(fields: [eventlocationId], references: [id], onDelete: Cascade)
  RSO             RSO?           @relation(fields: [rSOId], references: [id])

  @@index([id])
}

model Feedback {
  id       String    @id @default(cuid())
  eventId  String    @unique
  comments Comment[]
  ratings  Rating[]
  Event    Event[]

  @@index([id, eventId])
}

model Comment {
  id         String    @id @default(cuid())
  comment    String
  feedbackId String?
  author     String?
  email      String
  userId     String?
  user       User?     @relation(fields: [userId], references: [id])
  Feedback   Feedback? @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}

model Rating {
  id         String    @id @default(cuid())
  rating     Int
  userId     String?
  feedbackId String?
  user       User?     @relation(fields: [userId], references: [id])
  Feedback   Feedback? @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}

model Location {
  id         String       @id @default(cuid())
  name       String       @db.Text
  latitude   Float
  longitude  Float
  University University[]

  @@index([id])
}

model EventLocation {
  id        String  @id @default(cuid())
  addr      String  @db.Text
  latitude  Float
  longitude Float
  uniId     String?
  eventId   String?
  Event     Event?

  @@index([uniId, eventId])
}

model University {
  id           String    @id @default(cuid())
  name         String
  description  String?
  num_students Float
  phone_no     String?   @db.Text
  locationId   String?   @unique
  location     Location? @relation(fields: [locationId], references: [id])
  User         User[]
  Event        Event[]
  RSO          RSO[]

  @@index([id])
}

model RSO {
  id          String     @id @default(cuid())
  name        String
  adminID     String
  uniId       String
  description String?    @db.Text
  active      String
  uni         University @relation(fields: [uniId], references: [id])
  members     Member[]
  events      Event[]

  @@index([id, uniId])
}

model Member {
  id       String  @id @default(cuid())
  rsoId    String
  userId   String
  rsoName  String
  name     String?
  email    String
  uniId    String
  approved String
  isAdmin  String
  user     User    @relation(fields: [userId], references: [id])
  rso      RSO     @relation(fields: [rsoId], references: [id], onDelete: Cascade)

  @@index([id, rsoId])
}

enum Role {
  STUDENT
  ADMIN
  SUPERADMIN
}

enum EventType {
  PUBLIC
  PRIVATE
  RSO_EVENT
}
