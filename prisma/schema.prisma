generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          Role        @default(STUDENT)
  universityId  String?
  accounts      Account[]
  sessions      Session[]
  rso           RSO[]
  uni           University? @relation(fields: [universityId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id              String         @id @default(cuid())
  name            String         @db.Text
  category        String?        @db.Text
  description     String?        @db.Text
  time            String?        @db.Text
  date            String?        @db.Text
  phone_no        Int?
  email           String?        @db.Text
  type            EventType
  feedbackId      String?
  feedback        Feedback?      @relation(fields: [feedbackId], references: [id])
  eventlocation   EventLocation? @relation(fields: [eventlocationId], references: [id])
  eventlocationId String?

  @@index([id, feedbackId])
}

model EventApproval {
  id              String         @id @default(cuid())
  name            String         @db.Text
  category        String?        @db.Text
  description     String?        @db.Text
  time            String?        @db.Text
  date            String?        @db.Text
  phone_no        Int?
  email           String?        @db.Text
  type            EventType
  eventLocation   EventLocation? @relation(fields: [eventLocationId], references: [id])
  eventLocationId String?

  @@index([id])
}

model Feedback {
  id         String    @id @default(cuid())
  feedbackId String?
  comments   Comment[]
  ratings    Rating[]
  Event      Event[]

  @@index([feedbackId])
}

model Comment {
  id         String    @id @default(cuid())
  comment    String
  feedbackId String?
  Feedback   Feedback? @relation(fields: [feedbackId], references: [id])
}

model Rating {
  id         String    @id @default(cuid())
  rating     Int
  feedbackId String?
  Feedback   Feedback? @relation(fields: [feedbackId], references: [id])
}

model Location {
  id         String       @id @default(cuid())
  name       String       @db.Text
  latitude   Float
  longitude  Float
  uniId      String
  University University[]

  @@index([uniId])
}

model EventLocation {
  id            String          @id @default(cuid())
  name          String          @db.Text
  latitude      Float
  longitude     Float
  uniId         String?        
  eventId       String?
  Event         Event[]
  EventApproval EventApproval[]

  @@index([uniId, eventId])
}

model University {
  id           String    @id @default(cuid())
  uniId        String
  name         String
  description  String?
  num_students Int?
  Location     Location? @relation(fields: [locationId], references: [id])
  User         User[]
  locationId   String?

  @@index([uniId])
}

model RSO {
  id      String   @id @default(cuid())
  name    String
  userId  String
  rsoId   String
  members Member[]
  admin   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id, rsoId])
}

model Member {
  id    String @id @default(cuid())
  rsoId String
  rso   RSO    @relation(fields: [rsoId], references: [id], onDelete: Cascade)

  @@index([id, rsoId])
}

enum Role {
  STUDENT
  ADMIN
  SUPERADMIN
}

enum EventType {
  PUBLIC
  PRIVATE
  RSO_EVENT
}
