generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          Role        @default(STUDENT)
  universityId  String?
  accounts      Account[]
  sessions      Session[]
  uni           University? @relation(fields: [universityId], references: [id])
  Comment       Comment[]
  Rating        Rating[]
  Member        Member[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id              String         @id @default(cuid())
  name            String         @db.Text
  category        String?        @db.Text
  description     String?        @db.Text
  date            String?        @db.Text
  phone_no        String?        @db.Text
  type            EventType
  university      University?    @relation(fields: [universityId], references: [id])
  feedbackId      String?        @unique
  feedback        Feedback?      @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  eventlocation   EventLocation? @relation(fields: [eventlocationId], references: [id], onDelete: Cascade)
  eventlocationId String?        @unique
  universityId    String?
  RSO             RSO?           @relation(fields: [rSOId], references: [id])
  rSOId           String?
  approved        String

  @@index([id])
}

model Feedback {
  id       String    @id @default(cuid())
  comments Comment[]
  ratings  Rating[]
  eventId  String    @unique
  Event    Event[]

  @@index([id, eventId])
}

model Comment {
  id         String    @id @default(cuid())
  comment    String
  feedbackId String?
  author     String
  email      String
  user       User?     @relation(fields: [userId], references: [id])
  Feedback   Feedback? @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  userId     String?
}

model Rating {
  id         String    @id @default(cuid())
  rating     Int
  userId     String?
  user       User?     @relation(fields: [userId], references: [id])
  feedbackId String?
  Feedback   Feedback? @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}

model Location {
  id         String       @id @default(cuid())
  name       String       @db.Text
  latitude   Float
  longitude  Float
  University University[]

  @@index([id])
}

model EventLocation {
  id        String  @id @default(cuid())
  addr      String  @db.Text
  latitude  Float
  longitude Float
  uniId     String?
  eventId   String?
  Event     Event?

  @@index([uniId, eventId])
}

model University {
  id           String    @id @default(cuid())
  name         String
  description  String?
  num_students Float
  phone_no     String?   @db.Text
  location     Location? @relation(fields: [locationId], references: [id])
  User         User[]
  Event        Event[]
  locationId   String?   @unique
  RSO          RSO[]

  @@index([id])
}

model RSO {
  id          String     @id @default(cuid())
  name        String
  adminID     String
  uniId       String
  uni         University @relation(fields: [uniId], references: [id])
  description String?    @db.Text
  members     Member[]
  events      Event[]
  active      String

  @@index([id, uniId])
}

model Member {
  id       String @id @default(cuid())
  rsoId    String
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  rso      RSO    @relation(fields: [rsoId], references: [id], onDelete: Cascade)
  rsoName  String
  name     String    
  email    String    
  uniId    String
  approved String
  isAdmin  String

  @@index([id, rsoId])
}

enum Role {
  STUDENT
  ADMIN
  SUPERADMIN
}

enum EventType {
  PUBLIC
  PRIVATE
  RSO_EVENT
}
