generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  STUDENT
  ADMIN
  SUPERADMIN
}

enum Type {
  PUBLIC
  PRIVATE
  RSO_EVENT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  rso           RSO[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String    @id @default(cuid())
  eventId     String    @unique
  name        String
  category    String?
  description String?
  time        String?
  date        String?
  phone_no    Int?
  email       String?
  location    Location?
  type        Type
  feedback    Feedback? @relation(fields: [feedbackId], references: [id])
  feedbackId  String?

  @@index([eventId, feedbackId])
}

model Feedback {
  id         String    @id @default(cuid())
  feedbackId String?
  comments   Comment[]
  ratings    Rating[]
  Event      Event[]

  @@index([feedbackId])
}

model Comment {
  id         String    @id @default(cuid())
  comment    String
  Feedback   Feedback? @relation(fields: [feedbackId], references: [id])
  feedbackId String?
}

model Rating {
  id         String    @id @default(cuid())
  rating     Int
  Feedback   Feedback? @relation(fields: [feedbackId], references: [id])
  feedbackId String?
}

model Location {
  id        String      @id @default(cuid())
  name      String
  latitude  Int
  longitude Int
  uniId     String?     @unique
  eventId   String?     @unique
  event     Event?      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uni       University? @relation(fields: [uniId], references: [id], onDelete: Cascade)

  @@index([uniId, eventId])
}

model University {
  id           String    @id @default(cuid())
  uniId        String    @unique
  name         String
  description  String?
  num_students Int?
  Location     Location?

  @@index([uniId])
}

model RSO {
  id      String   @id @default(cuid())
  name    String
  members Member[]
  userId  String
  rsoId   String
  admin   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id, rsoId])
}

model Member {
  id    String @id @default(cuid())
  rsoId String
  rso   RSO    @relation(fields: [rsoId], references: [id], onDelete: Cascade)

  @@index([id, rsoId])
}
